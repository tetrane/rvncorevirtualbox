#include <iostream>
#include <core_virtualbox.h>

using namespace reven;

int main(int argc, char** argv) {

	if (argc != 2) {
		std::cerr << "Usage: " << argv[0] << " <core>" << std::endl;
		exit(1);
	}

	vmghost::core_virtualbox core;

	try {
		core.parse(argv[1]);
	} catch(const std::exception& e) {
		std::cerr << "Exception: " << e.what() << std::endl;
		exit(1);
	}

	std::cout << "core generated by VirtualBox " << core.virtualbox_version() <<
	             "."  << core.virtualbox_revision() <<
	             " format=" << std::hex << core.format_version() << std::endl;

	int c=0;
	for (auto it = core.cpu_begin(); it != core.cpu_end(); ++it) {
		std::cout << std::hex <<
		"Cpu #" << c++ << std::endl <<
		" rax=" << it->rax() <<
		" rbx=" << it->rbx() <<
		" rcx=" << it->rcx() <<
		" rdx=" << it->rdx() << std::endl <<

		" rsp=" << it->rsp() <<
		" rbp=" << it->rbp() <<
		" rsi=" << it->rsi() <<
		" rdi=" << it->rdi() << std::endl <<

		" cr0=" << it->cr0() <<
		" cr2=" << it->cr2() <<
		" cr3=" << it->cr3() <<
		" cr4=" << it->cr4() << std::endl <<

		" rip=" << it->rip() << std::endl <<

		" cs=" << it->cs() <<
		" ds=" << it->ds() <<
		" ss=" << it->ss() <<
		" gs=" << it->gs() <<
		" fs=" << it->fs() <<
		" es=" << it->es() << std::endl <<

		" C=" << it->carry_flag() <<
		" P=" << it->parity_flag() <<
		" A=" << it->adjust_flag() <<
		" Z=" << it->zero_flag() <<
		" S=" << it->sign_flag() <<
		" O=" << it->overflow_flag() <<
		" D=" << it->directional_flag() <<
		" R=" << it->resume_flag() <<
		" T=" << it->trap_flag() <<
		" I=" << it->interrupt_flag() << std::endl <<
		" CPUID=" << it->cpuid_flag() <<
		" IOPL=" << it->iopl_flag() << std::endl <<

		" sysenter_cs_r0=" << it->sysenter_cs_r0() << std::endl <<
		" sysenter_eip_r0=" << it->sysenter_eip_r0() << std::endl;
	}

	std::cout << std::endl << "Memory chunks : " << std::endl;

	core.physical_memory()->visit_chunks([&](const reven::vmghost::MemoryChunk& chunk) {
		std::cout << " | From " << std::hex << chunk.physical_address()
		          << " to " << std::hex << (chunk.physical_address() + chunk.size_in_memory() - 1)
		          << " (" << std::dec << chunk.size_in_memory() << " bytes)" << std::endl;
	});
}
